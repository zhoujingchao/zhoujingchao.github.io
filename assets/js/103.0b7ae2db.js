(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{593:function(e,t,r){"use strict";r.r(t);var o=r(42),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"egg-rocketmq消息中间件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#egg-rocketmq消息中间件"}},[e._v("#")]),e._v(" egg-rocketmq消息中间件")]),e._v(" "),r("p",[e._v("前一阵子的业务驱使下，出于考虑系统稳定性以及 java 和 node 的解耦性，node端接入了中台已有的 "),r("a",{attrs:{href:"https://github.com/apache/rocketmq",target:"_blank",rel:"noopener noreferrer"}},[e._v("rocketmq"),r("OutboundLink")],1),e._v(" 消息中间件，我们 node 业务架子用的是 "),r("a",{attrs:{href:"https://github.com/eggjs/egg",target:"_blank",rel:"noopener noreferrer"}},[e._v("egg"),r("OutboundLink")],1),e._v("，在这基础上结合中台和相关业务，做过二次框架开发。这回接入 rocketmq 使得编码方式一点都不友好，所有的生产者和消费者业务代码统统不符合 egg 本身编码规范。因此后面利用碎片化时间，撸了一个 "),r("a",{attrs:{href:"https://github.com/zhoujingchao/egg-rocketmq",target:"_blank",rel:"noopener noreferrer"}},[e._v("egg-rocketmq"),r("OutboundLink")],1),e._v(" 插件，是基于 "),r("a",{attrs:{href:"https://github.com/apache/rocketmq-client-nodejs",target:"_blank",rel:"noopener noreferrer"}},[e._v("rocketmq-client-nodejs"),r("OutboundLink")],1),e._v(" 扩展的，有需要的或者感兴趣的同学可以试一试。")])])}),[],!1,null,null,null);t.default=n.exports}}]);